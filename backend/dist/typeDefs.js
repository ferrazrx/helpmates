"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _taggedTemplateLiteral2 = require("babel-runtime/helpers/taggedTemplateLiteral");

var _taggedTemplateLiteral3 = _interopRequireDefault(_taggedTemplateLiteral2);

var _templateObject = (0, _taggedTemplateLiteral3.default)(["\n  #import * from '../dist/generated/prisma.graphql'\n\n  type Mutation {\n    createUser(data: UserCreateInput!): PrivateUser!\n    createService(data: ServiceCreateInput!): Service!\n    updateService(\n      data: ServiceUpdateInput!\n      where: ServiceWhereUniqueInput!\n    ): Service!\n    deleteService(where: ServiceWhereUniqueInput!): Service!\n    signup(data: UserCreateInput!): PrivateUser!\n    signin(email: String!, password: String!): PrivateUser\n    signout: SuccessMessage\n    requestReset(email: String!): SuccessMessage\n    resetPassword(\n      resetToken: String!\n      password: String!\n      confirm: String!\n    ): PrivateUser\n    addComment(question: String!, service: ID!): Comment!\n  }\n  type Query {\n    users: [PublicUser]!\n    services(\n      where: ServiceWhereInput\n      orderBy: ServiceOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Service]!\n    categories: [Category]!\n    service(where: ServiceWhereUniqueInput!): Service!\n    servicesConnection(\n      where: ServiceWhereInput\n      orderBy: ServiceOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): ServiceConnection!\n    provinces: [Province]!\n    loggedUser: PrivateUser\n    canEditPost(where: ServiceWhereUniqueInput!): Boolean\n    canDeletePost(where: ServiceWhereUniqueInput!): Boolean\n    myServices(orderBy: ServiceOrderByInput): [Service]!\n    notifications(\n      where: NotificationWhereInput\n      orderBy: NotificationOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Notification]\n  }\n  type Subscription {\n    notificationAdded: Notification\n  }\n\n  type Service {\n    id: ID!\n    title: String!\n    description: String!\n    maxPayment: Float!\n    category: Category!\n    images: [String!]!\n    thumbnail: String\n    comments(\n      where: CommentWhereInput\n      orderBy: CommentOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Comment!]\n    author: PublicUser!\n    bids(\n      where: BidWhereInput\n      orderBy: BidOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Bid!]\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type Notification {\n    label: String!\n    service: Service!\n    createdAt: DateTime!\n    viewedAt: DateTime\n  }\n\n  type Comment {\n    id: ID!\n    question: String!\n    answers: [String!]!\n    author: PublicUser!\n    service: Service!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type PrivateUser {\n    id: ID!\n    fname: String!\n    lname: String!\n    address: Address!\n    email: String!\n    permissions: [Permission!]!\n  }\n  type PublicUser {\n    fname: String!\n    lname: String!\n  }\n  input ServiceCreateInput {\n    title: String!\n    description: String!\n    maxPayment: Float!\n    images: [Upload]!\n    category: CategoryCreateOneInput!\n  }\n  input ServiceUpdateInput {\n    title: String\n    description: String\n    maxPayment: Float\n    images: [Upload]\n    category: ID\n  }\n\n  type SuccessMessage {\n    message: String\n  }\n\n  scalar Upload\n"], ["\n  #import * from '../dist/generated/prisma.graphql'\n\n  type Mutation {\n    createUser(data: UserCreateInput!): PrivateUser!\n    createService(data: ServiceCreateInput!): Service!\n    updateService(\n      data: ServiceUpdateInput!\n      where: ServiceWhereUniqueInput!\n    ): Service!\n    deleteService(where: ServiceWhereUniqueInput!): Service!\n    signup(data: UserCreateInput!): PrivateUser!\n    signin(email: String!, password: String!): PrivateUser\n    signout: SuccessMessage\n    requestReset(email: String!): SuccessMessage\n    resetPassword(\n      resetToken: String!\n      password: String!\n      confirm: String!\n    ): PrivateUser\n    addComment(question: String!, service: ID!): Comment!\n  }\n  type Query {\n    users: [PublicUser]!\n    services(\n      where: ServiceWhereInput\n      orderBy: ServiceOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Service]!\n    categories: [Category]!\n    service(where: ServiceWhereUniqueInput!): Service!\n    servicesConnection(\n      where: ServiceWhereInput\n      orderBy: ServiceOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): ServiceConnection!\n    provinces: [Province]!\n    loggedUser: PrivateUser\n    canEditPost(where: ServiceWhereUniqueInput!): Boolean\n    canDeletePost(where: ServiceWhereUniqueInput!): Boolean\n    myServices(orderBy: ServiceOrderByInput): [Service]!\n    notifications(\n      where: NotificationWhereInput\n      orderBy: NotificationOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Notification]\n  }\n  type Subscription {\n    notificationAdded: Notification\n  }\n\n  type Service {\n    id: ID!\n    title: String!\n    description: String!\n    maxPayment: Float!\n    category: Category!\n    images: [String!]!\n    thumbnail: String\n    comments(\n      where: CommentWhereInput\n      orderBy: CommentOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Comment!]\n    author: PublicUser!\n    bids(\n      where: BidWhereInput\n      orderBy: BidOrderByInput\n      skip: Int\n      after: String\n      before: String\n      first: Int\n      last: Int\n    ): [Bid!]\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type Notification {\n    label: String!\n    service: Service!\n    createdAt: DateTime!\n    viewedAt: DateTime\n  }\n\n  type Comment {\n    id: ID!\n    question: String!\n    answers: [String!]!\n    author: PublicUser!\n    service: Service!\n    createdAt: DateTime!\n    updatedAt: DateTime!\n  }\n\n  type PrivateUser {\n    id: ID!\n    fname: String!\n    lname: String!\n    address: Address!\n    email: String!\n    permissions: [Permission!]!\n  }\n  type PublicUser {\n    fname: String!\n    lname: String!\n  }\n  input ServiceCreateInput {\n    title: String!\n    description: String!\n    maxPayment: Float!\n    images: [Upload]!\n    category: CategoryCreateOneInput!\n  }\n  input ServiceUpdateInput {\n    title: String\n    description: String\n    maxPayment: Float\n    images: [Upload]\n    category: ID\n  }\n\n  type SuccessMessage {\n    message: String\n  }\n\n  scalar Upload\n"]);

var _apolloServer = require("apollo-server");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = (0, _apolloServer.gql)(_templateObject);